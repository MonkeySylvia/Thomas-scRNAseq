# This is the Seurat code for multimappers
# The output was generated from Starsolo, by EM method
# EM output contains floats, so I rounded into integers first

# Load into R
# First combine two samples into one matrix

library(Seurat)
setwd("/workdir/nc499/thomas/scRNAseqThomasWidmann/raw/All/")
MT<-read.delim("MT_genes_0130.txt", header=TRUE)
sample1.data <- Read10X(data.dir = "./sample1_263/Solo.out/Gene/raw/multi")
sample1 <- CreateSeuratObject(counts = sample1.data, project = "sample1", min.features = 200)
sample1
sample1[["percent.mt"]] <- PercentageFeatureSet(sample1, features = MT$genenames)


sample2.data <- Read10X(data.dir = "./sample2_263/Solo.out/Gene/raw/multi")
sample2 <- CreateSeuratObject(counts = sample2.data, project = "sample2", min.features = 200)
sample2
sample2[["percent.mt"]] <- PercentageFeatureSet(sample2, features = MT$genenames)

pbmc.combined <- merge(sample1, y = sample2, add.cell.ids = c("sample1", "sample2"), project = "head")
pbmc.combined

table(pbmc.combined$orig.ident)

# QC#
# Remove low quality cells, the threshould is dependent on the dataset.
VlnPlot(pbmc.combined, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)

pbmc <- subset(pbmc.combined, subset = nFeature_RNA > 200 & nCount_RNA > 300 & nFeature_RNA < 5000 & nCount_RNA < 50000 & percent.mt < 45 )
dim(pbmc)

# Separate batches in order to correct batch effects
pbmc.list <- SplitObject(pbmc, split.by = "orig.ident")

# This is the standard Log-transform normalization. You can change the normalization method here (normalization.method = "RC", scale.factor=1e6)
for (i in 1:length(pbmc.list)) {
  pbmc.list[[i]] <- NormalizeData(pbmc.list[[i]], verbose = FALSE)
  pbmc.list[[i]] <- FindVariableFeatures(pbmc.list[[i]], selection.method = "vst", 
                                         nfeatures = 4000, verbose = TRUE)
}

# Integrated 2 samples
all.genes <- rownames(pbmc)
pbmc.anchors <- FindIntegrationAnchors(object.list = pbmc.list, anchor.features=4000, dims = 1:40)
pbmc.integrated <- IntegrateData(anchorset = pbmc.anchors, dims = 1:40, features.to.integrate=all.genes)
DefaultAssay(pbmc.integrated) <- "integrated"
pbmc.integrated <- ScaleData(pbmc.integrated, verbose = FALSE)

# Run PCA and determine the dimensions 
pbmc.integrated <- RunPCA(pbmc.integrated, npcs = 100)
pbmc.integrated <- JackStraw(pbmc.integrated, reduction = "pca",num.replicate =100,dims = 100)

pbmc.integrated <- ScoreJackStraw(pbmc.integrated, dims = 1:100)

JackStrawPlot(pbmc.integrated, dims = 1:100)

# The dims are determined differently based on the samples
pbmc.integrated <- FindNeighbors(pbmc.integrated, dims = 1:89)
pbmc.integrated <- FindClusters(pbmc.integrated, resolution =2.2)

pbmc.integrated <- RunUMAP(pbmc.integrated, dims = 1:89)

DimPlot(pbmc.integrated, reduction = "umap", label =T,label.size=3)

# Visualization
p1 <- DimPlot(pbmc.integrated, reduction = "umap", group.by = "orig.ident")
p2 <- DimPlot(pbmc.integrated, reduction = "umap", label = TRUE, repel = TRUE)
p3 <- FeaturePlot(pbmc.integrated, features =c("GFP","ENSDARG00000014420"), cols = c("honeydew3","red1"),pt.size=0.3,min.cutoff=0)
p1 + p2)
p5<- FeaturePlot(pbmc.integrated, features ="L2-2-DRe-promoter"
                 ,cols = c("honeydew3","red1"),pt.size=0.3,min.cutoff=2) #you can adjust the min.cutoff to scale the Umap

p6<-FeaturePlot(pbmc.integrated, features ="L2-2-DRe"
                ,cols = c("honeydew3","red1"),pt.size=0.3,min.cutoff=4)
p1 + p2
p3
p5+p6


FeaturePlot(pbmc.integrated, features =c("L2-2-DRe-promoter","L2-2-DRe")
                ,cols = c("honeydew3","red1"),pt.size=0.3, min.cutoff=2)



# Find markers, you can adjust the parameters. I used min.pct=0.18 here
pbmc.integrated.markers.20 <- FindAllMarkers(pbmc.integrated, min.pct=0.18, logfc.threshold = 0.25, return.thresh=0.05, only.pos=TRUE)
pbmc.markers.20.2<-pbmc.integrated.markers.20[which(pbmc.integrated.markers.20[,5]<0.05),]

write.table(pbmc.markers.20.2,file="head_r2.2_dim89_batchcorrectedMT_markers_multi_012522_p0.18_pos.txt",sep="\t",quote=F,row.names=F)


list <-print(pbmc.markers.20.2 %>%
               group_by(cluster) %>%
               slice_max(n = 50, order_by = avg_logFC), n=100)

write.table(list,file="head_r2.2_dim89_batchcorrectedMT_markers_multi_012522_0.18_pos_top50.txt",sep="\t",quote=F,row.names=F)


#save data
saveRDS(pbmc.integrated, file= "head_r2.2dim89_batchcorrectedMT_multi_012522.rds")

# Read the data
pbmc.integrated <- readRDS("head_r2.2dim89_batchcorrectedMT_multi_012522.rds")

#average expression
AE<-AverageExpression(object = pbmc.integrated)
write.table(AE$RNA,file="head_r2.9_dim98_batchcorrectedMT_markers120121_p0.18_AE.txt",sep="\t",quote=F,row.names=T)




#grab cell identity
cells<-WhichCells(pbmc.integrated)
write.table(cells,file="cells_multi_5652.txt",sep="\t",quote=F,row.names=F)

cells_clusters2_19<-WhichCells(pbmc.integrated,idents=c(2,19))
write.table(cells_clusters2_19,file="cells_multi_c2_c19.txt",sep="\t",quote=F,row.names=F)

# Violin plot and Ridge plot
p11<- VlnPlot(pbmc.integrated, features = "L2-2-DRe", slot = "counts", pt.size =0.02 ) #, slot = "counts", log = TRUE"L2-2-DRe-promoter","L2-2-DRe"
p12<-VlnPlot(pbmc.integrated, features = "L2-2-DRe",slot = "data", pt.size =0.02 ) #, slot = "counts", log = TRUE"L2-2-DRe-promoter","L2-2-DRe"
plot_grid(p11, p12, ncol = 2, nrow = 1) 

RidgePlot(pbmc.integrated, features = c("L2-2-DRe-promoter","GFP"), ncol = 2)

